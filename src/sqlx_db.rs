use std::env;
use chrono::NaiveDateTime;
use sqlx::{Error, Pool, Postgres, postgres::PgPoolOptions};


struct SqlxDB {
    pool: Pool<Postgres>,
}

impl SqlxDB {
    pub async fn new() -> Result<Self, Error> {
        let user = env::var("POSTGRES_USER").unwrap();
        let pw = env::var("POSTGRES_PASSWORD").unwrap();
        let conn_str = format!("postgres://{}:{}@localhost/postgres", user, pw);
        let pool = PgPoolOptions::new()
            .max_connections(10)
            .connect(&conn_str).await?;

        Ok(Self{pool})
    }

    pub async fn create_table(&self, table: &str, columns: &str) -> Result<(), Error> {
        let create_table_query = format!("CREATE TABLE IF NOT EXISTS {} ({});", table, columns);
        println!("Running create table: \n{}", create_table_query);
        sqlx::query(&create_table_query).execute(&self.pool).await?;
        Ok(())
    }
}

pub async fn sqlx_db() -> Result<(), Error> {
    let db = SqlxDB::new().await?;

    db.create_table(
        "clients",
        "
id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
, name varchar(255) NOT NULL
, created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
, updated_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
"
    ).await?;


    let row: (i32,) = sqlx::query_as("SELECT 1;")
        .fetch_one(&db.pool).await?;
    println!("{}", row.0);

    sqlx::query("
INSERT INTO clients (name) VALUES
($1)
;")
        .bind("first_sqlx_client")
        .execute(&db.pool)
        .await?;

    let rows: Vec<(i32, String, NaiveDateTime, NaiveDateTime)>  = sqlx::query_as("SELECT * FROM clients;")
        .fetch_all(&db.pool).await?;
    for r in rows.iter() {
        println!("{}, {}, {}, {}", r.0, r.1, r.2, r.3);
    }

    Ok(())
}
